generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum PropTypes {
  Token
  Map
  Image
}

enum GameRole {
  GM
  Player
  Observer
}

enum InviteType {
  Campaign
  Session
}

// tables
model Campaign {
  id          Int     @id @default(autoincrement())
  name        String
  systemId    Int
  createdById Int
  active      Boolean @default(true)
  public      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  system      System                    @relation(fields: [systemId], references: [id], onDelete: Cascade)
  createdBy   User                      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  inviteCode  Invite?
  sessions    Session[]
  subscribers SubscribedUserCampaigns[]
}

model Invite {
  id         Int        @id @default(autoincrement())
  code       String     @unique
  type       InviteType
  campaignId Int?       @unique
  sessionId  Int?       @unique
  expiresAt  DateTime?

  createdAt DateTime @default(now())

  // relationship
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  session  Session?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Prop {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  type        PropTypes @default(Image)
  public      Boolean   @default(false)
  createdById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  creator        User             @relation(fields: [createdById], references: [id], onDelete: NoAction)
  userOwnedProps UserOwnedProps[]
  purchasedProps PurchasedProps[]
}

model PurchasedProps {
  userId      Int
  propId      Int
  purchasedAt DateTime @default(now())

  // relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  prop Prop @relation(fields: [propId], references: [id], onDelete: Cascade)

  @@id([userId, propId])
}

model Session {
  id         Int     @id @default(autoincrement())
  name       String
  public     Boolean @default(true)
  campaignId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  campaign     Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  inviteCode   Invite?
  participants SessionParticipants[]
}

model System {
  id       Int    @id @default(autoincrement())
  name     String
  ruleBook String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  campaigns Campaign[]
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  createdProps        Prop[]
  createdCampaigns    Campaign[]
  subscribedCampaigns SubscribedUserCampaigns[]
  ownedProps          UserOwnedProps[]
  sessionParticipate  SessionParticipants[]
  purchasedProps      PurchasedProps[]
}

// helper tables
model SessionParticipants {
  sessionId Int
  userId    Int
  role      GameRole @default(Player)

  joinedAt DateTime @default(now())

  // relationship
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([sessionId, userId])
}

model SubscribedUserCampaigns {
  userId     Int
  campaignId Int
  role       GameRole @default(Player)

  subscribedAt DateTime @default(now())

  // relationship
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([userId, campaignId])
}

model UserOwnedProps {
  userId Int
  propId Int

  acquiredAt DateTime @default(now())

  // relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  prop Prop @relation(fields: [propId], references: [id], onDelete: Cascade)

  @@id([userId, propId])
}
